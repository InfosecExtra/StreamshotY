import hashlib
import re
import os
import json
import dns.resolver
from time import sleep

from playwright.sync_api import sync_playwright
from minio import Minio
import io
import pymongo

import yara
rules = yara.compile('./yara/rules.yar')

MINIO_SERVER = os.environ['MINIO_SERVER']
MINIO_ACCESS_KEY = os.environ['MINIO_ACCESS_KEY']
MINIO_SECRET_KEY = os.environ['MINIO_SECRET_KEY']
MINIO_BUCKET = os.environ['MINIO_BUCKET']

MONGODB_SERVER = os.environ['MONGODB_SERVER']
MONGODB_DATABASE = os.environ['MONGODB_DATABASE']
MONGODB_COLLECTION = os.environ['MONGODB_COLLECTION']

mongoclient = pymongo.MongoClient(MONGODB_SERVER)
mydb = mongoclient[MONGODB_DATABASE]
mycol = mydb[MONGODB_COLLECTION]

my_resolver = dns.resolver.Resolver()
my_resolver.nameservers = ['208.67.220.220']


# this is the policy for setting the bucket as read-only for anonymous access
policy = {"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:GetBucketLocation","s3:ListBucket"],"Resource":[f"arn:aws:s3:::{MINIO_BUCKET}"]},{"Effect":"Allow","Principal":{"AWS":["*"]},"Action":["s3:GetObject"],"Resource":[f"arn:aws:s3:::{MINIO_BUCKET}/*"]}]}

minioclient = Minio(MINIO_SERVER,access_key=MINIO_ACCESS_KEY,secret_key=MINIO_SECRET_KEY,secure=False)
found = minioclient.bucket_exists(MINIO_BUCKET)
if not found:  #check if bucket exists, if it doesn't then create it and assign it the anonymous read-only policy
    minioclient.make_bucket(MINIO_BUCKET)
    minioclient.set_bucket_policy(MINIO_BUCKET, json.dumps(policy))


#this is the main screenshot task, it takes in taskid (generated by app) and url
def screenshot(taskid, url, private):
    data = {} #this is the data that will end up being stored in mongodb, you can add things to if you want such as additional processing

    data['private'] = private
    data['taskid'] = taskid
    data['url'] = url
    domain = url.split("/")[2]
    try:
        results= my_resolver.query(domain, 'a')
        if str(results[0]) in ['146.112.61.108','146.112.61.105','146.112.61.107']:
            data['opendns'] = True
    except:
        print("query failed", domain)
#split url in python get the domain from the middle, ask alex 
#extract domain or of url 
#do dns lookup and save results to array.
    with sync_playwright() as p:
        browser = p.chromium.launch() #launch chrome
        context = browser.new_context(ignore_https_errors=True) #new context, ignore https errors
        page = context.new_page() #new page

        def filter(route,request): #this drops requests containing certain things. i don't need people to look at file://, ip ranges or domains can be checked here too
            if "file://" in request.url:
                route.abort() #abort the request
            else:
                route.continue_() #allow the request

       

        page.route("**/*", filter)


        page.set_default_timeout(5000) #timeout set to 10 seconds

        try:
            page.goto(url) #go to the url
            sleep(1) # wait three seconds before taking a screenshot
            #png = page.screenshot(full_page=True) # take a full page screenshot
            png = page.screenshot() # take a screenshot, not full page
            data['yara_matches'] = str(rules.match(data=page.content()))
            object_name = taskid + ".png" # file name for minio file upload
            minioclient.put_object(MINIO_BUCKET,object_name,io.BytesIO(png),length=len(png),content_type="image/png") # upload the file to minio
        except Exception as e:
            data['error'] = str(e)

        page.close()
        context.close()
        browser.close()

    mycol.insert_one(data) # add data to mongodb

    return True